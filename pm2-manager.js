const pm2 = require("pm2");

const SERVICE_NAME = "Escape_Server";
const SERVER_PATH = "../EscapeServerTest/Escape_SingleServer.sh"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô path ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
function startServer() {
  pm2.connect((err) => {
    if (err) {
      console.error("Error connecting to PM2:", err);
      process.exit(2);
    }

    pm2.start(
      {
        name: SERVICE_NAME,
        script: SERVER_PATH,
        exec_mode: "fork", // "fork" ‡∏´‡∏£‡∏∑‡∏≠ "cluster" ‡∏Å‡πá‡πÑ‡∏î‡πâ
        autorestart: true,
        watch: false, // true ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ PM2 ‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå
        max_memory_restart: "500M",
      },
      (err, proc) => {
        if (err) console.error("Error starting server:", err);
        else console.log(`‚úÖ Server started with PM2: ${SERVICE_NAME}`);
        pm2.disconnect();
      }
    );
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
function stopServer() {
  pm2.connect((err) => {
    if (err) {
      console.error("Error connecting to PM2:", err);
      process.exit(2);
    }

    pm2.stop(SERVICE_NAME, (err) => {
      if (err) console.error("Error stopping server:", err);
      else console.log(`üõë Server stopped: ${SERVICE_NAME}`);
      pm2.disconnect();
    });
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
function restartServer() {
  pm2.connect((err) => {
    if (err) {
      console.error("Error connecting to PM2:", err);
      process.exit(2);
    }

    pm2.restart(SERVICE_NAME, (err) => {
      if (err) console.error("Error restarting server:", err);
      else console.log(`üîÑ Server restarted: ${SERVICE_NAME}`);
      pm2.disconnect();
    });
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å PM2
function deleteServer() {
  pm2.connect((err) => {
    if (err) {
      console.error("Error connecting to PM2:", err);
      process.exit(2);
    }

    pm2.delete(SERVICE_NAME, (err) => {
      if (err) console.error("Error deleting server:", err);
      else console.log(`‚ùå Server deleted from PM2: ${SERVICE_NAME}`);
      pm2.disconnect();
    });
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô PM2
function listServers() {
  pm2.connect((err) => {
    if (err) {
      console.error("Error connecting to PM2:", err);
      process.exit(2);
    }

    pm2.list((err, processList) => {
      if (err) console.error("Error listing servers:", err);
      else console.table(processList.map((proc) => ({
        id: proc.pm_id,
        name: proc.name,
        status: proc.pm2_env.status,
        memory: (proc.monit.memory / 1024 / 1024).toFixed(2) + " MB",
        cpu: proc.monit.cpu + " %",
      })));

      pm2.disconnect();
    });
  });
}

// üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏´‡∏ô
const command = process.argv[2];

switch (command) {
  case "start":
    startServer();
    break;
  case "stop":
    stopServer();
    break;
  case "restart":
    restartServer();
    break;
  case "delete":
    deleteServer();
    break;
  case "list":
    listServers();
    break;
  default:
    console.log("Usage: node pm2-manager.js <start|stop|restart|delete|list>");
}
